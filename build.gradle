plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.epages.restdocs-api-spec' version '0.16.4' // open api
  id 'org.hidetake.swagger.generator' version '2.18.2' // swagger ui
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// h2
	runtimeOnly 'com.h2database:h2'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	// mapstruct
  implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// jjwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// gson
  implementation 'com.google.code.gson:gson'

	// devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// open api
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'
  implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'

  implementation 'commons-io:commons-io:2.13.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	delete file('src/main/resources/static/docs/')
  copy {
    from "build/resources/main/static/docs"
    into "src/main/resources/static/docs/"
	}
}

bootJar {
  dependsOn(':openapi3')
  archiveFileName = 'shop.jar'
}

openapi3 {
	servers = [ {
		url = "https://teamdev.shop:7777"
		description = "배포 서버"
	},
	{
		url = "http://localhost:7777"
		description = "로컬 서버"
	} ]
	version = '0.0.1'
  // outputDirectory = "src/main/resources/static/docs"
  outputDirectory = 'build/resources/main/static/docs'
  outputFileNamePrefix = "doc"
	tagDescriptionsPropertiesFile = "src/main/resources/tag.yaml"
  title = 'Shop'
  description = '''안녕하세요. 이수희의 Shop API 문서입니다.<br />
	각 줄을 클릭 하시면 내용을 보실 수 있습니다.<br />
	<a href="https://github.com/lsh4711/shop">
	레포지토리 주소
	</a>
	<h3>서비스 요구사항</h3>
	<details>
	<summary>1. 마트 권한과 일반 사용자 권한이 구분되어있다. <- 클릭해주세요!</summary>
	<hr />
	<pre>회원에게 JWT 토큰을 발급하고 스프링 시큐리티를 통해 API 마다 필요한 권한을 설정하여
	마트(판매자) 권한과 일반 사용자의 서비스 이용 권한을 구분했습니다.<br />
	판매자는 하나의 계정으로 판매자와 일반 사용자로서 서비스 이용이 가능하며
	비회원은 상품과 가격 조회 서비스만 이용 가능합니다.<br />
	권한 범위는 판매자(USER, SELLER) > 일반 사용자(USER) > 비회원 입니다.</pre>
	</details>
	<hr />
	<details>
	<summary>2. 상품에 대한 생성, 수정, 삭제는 마트 권한이 필요하다.</summary>
	<hr />
	<pre>판매자 권한이 있는 회원은 마트를 등록한 후, 상품을 판매하고 관리할 수 있습니다.<br />
	다른 회원이 상품을 구매한다면 마트에 정산금이 적립됩니다.
	정산금은 보유 중인 마트를 조회할 때 확인할 수 있습니다.</pre>
	</details>
	<hr />
	<details>
	<summary>3. 상품을 생성할 수 있다.</summary>
	<hr />
	<pre>본인 소유의 마트가 있다면, 서버에 정보가 등록된 제품을 상품으로써 등록하고 판매할 수 있습니다.
	팔고 싶은 제품이 등록되어 있지 않다면 직접 제품을 등록할 수 있고
	제품의 제조사나 알맞은 분류 명을 찾을 수 없다면 이 또한 등록이 가능합니다.<br />
	추가로 특정 시점에서의 가격 조회 기능을 위해 상품이 등록되는 시점에 가격 기록 테이블에 기록됩니다.</pre>
	</details>
	<hr />
	<details>
	<summary>4. 상품 가격을 수정할 수 있다.</summary>
	<hr />
	<pre>판매자는 본인 소유의 마트에 등록된 상품의 가격을 수정할 수 있습니다.<br />
	등록과 마찬가지로 특정 시점에서의 가격 조회 기능을 위해 가격이 변경될 때마다, 가격 기록 테이블에 기록됩니다.</pre>
	</details>
	<hr />
	<details>
	<summary>5. 특정 시점의 상품 가격을 조회할 수 있다.</summary>
	<hr />
	<pre>상품의 예전 가격이 궁금한 서비스 이용자들은 특정 시점에서의 상품 가격을 조회할 수 있습니다.
	초 단위까지 구분해서 조회가 가능합니다.<br />
	또한, 최대 90일 전까지의 상품 가격 차트 데이터를 조회할 수 있습니다.</pre>
	</details>
	<hr />
	<details>
	<summary>6. 상품을 삭제할 수 있다.</summary>
	<hr />
	<pre>판매자는 본인 소유의 마트에 등록된 상품을 삭제할 수 있습니다.</pre>
	</details>
	<hr />
	<details>
	<summary>7. 주문에 대한 총 금액을 계산할 수 있다.</summary>
	<hr />
	<pre>회원은 각 마트의 상품을 장바구니에 등록할 수 있고
	장바구니를 조회할 때 각 상품의 가격과 배송비, 총 결제 금액을 함께 확인할 수 있습니다.
	배송비를 제외한 총 금액이 5만원을 넘는다면 배송비는 무료입니다.<br />
	또한 보유중인 할인 쿠폰을 조회하고 쿠폰 적용 후의 가격을 확인할 수 있습니다.</pre>
	</details>
	<hr />
	<details>
	<summary>8. 주문에 대한 필요 결제 금액을 계산할 수 있다.</summary>
	<hr />
	<pre>쿠폰을 적용하면 각 상품의 할인 전, 후 금액과 할인 전, 후의 총 결제 금액을 확인할 수 있습니다.
	결제를 진행하면 사용한 쿠폰이 소진되고 장바구니가 비워집니다.<br />
	또한 상품을 판매한 마트에 정산금이 적립되고 주문 당시의 상품 목록과 결제 정보가 주문 내역 테이블에 기록됩니다.</pre>
	</details>
	<hr />
	<details>
	<summary>Ex. 쿠폰 정책</summary>
	<hr />
	<pre>다음과 같은 4종류의 쿠폰이 있습니다.<br />
	1. 특정 상품 고정 할인: 낱개 마다 적용
	2. 특정 상품 비율 할인: 낱개 마다 적용
	3. 전체 상품 비율 할인
	4. 전체 금액에서 고정 할인<br />
	쿠폰 여러개를 함께 사용 할 수 있지만 주문 한번에 최대 5개까지만 사용 가능합니다.<br />
	할인 적용 순서는
	특정 상품에 대해 낱개 마다 고정 할인 적용 후
	-> 특정 상품에 대한 비율 + 전체 상품에 대한 비율 할인 적용 
	-> 전체 상품 금액에서 고정 할인 적용 순입니다.</pre>
	</details>
	<hr />
	<br />
	<details>
	<summary>프로젝트 실행 방법</summary>
	<pre>자바 런타입 환경(JRE)이 설치 되어 있어야 실행이 가능합니다.
	<br />
	루트 디렉토리에서 'java -jar shop.jar' 명령어로 빌드 파일을 실행하거나
	'src/main/java/com/shop/' 경로의 ShopApplication.java 파일을 개발 툴에서 실행한 후
	<a href="http://localhost:7777">
	http://localhost:7777</a>에 접속하시면 Swagger-UI API 문서를 확인할 수 있습니다.
	<a href="http://localhost:7777/h2">
	http://localhost:7777/h2</a>에 접속하시면 데이터베이스를 확인할 수 있습니다.<br />
	H2 접속 정보:
	-JDBC URL: jdbc:h2:mem:test
	-username: sa
	-password:
	<br />
	개발 환경: Java 11, Spring Boot 2.7.15</pre>
	</details>
	<br />
	<hr />
	<pre>서비스의 이용 흐름은 다음과 같습니다.<br />
	판매자: 마트 등록 -> 보유 마트 목록 조회 -> 제품 목록 조회 -> (제품 정보가 없다면 카테고리, 제조사, 제품 등록) -> 상품 등록
	구매자: 마트 목록 조회 -> 상품 목록 조회 -> 장바구니 담기 -> 장바구니 조회 -> 쿠폰 목록 조회 및 적용 -> 쿠폰 사용 및 결제<br />
	빠른 테스트를 위한 주요 데이터는 첫번째 회원(member1)과 첫번째 마트(martId: 1)에 저장되어 있습니다.<br />
	아래는 테스트용 판매자 회원(member1)의 토큰입니다.
	우측의 자물쇠를 눌러 토큰 등록 후, 현재 페이지에서 요청을 보내보실 수 있습니다.<br />
	Bearer eyJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJST0xFX1NFTExFUiIsIlJPTEVfVVNFUiJdLCJpZCI6MSwidXNlcm5hbWUiOiJtZW1iZXIxIiwiaWF0IjoxNjk0MDQ0MTQ5LCJleHAiOjE2OTY2MzYxNDl9.Q42NORZvS68EhPzp4pGkQ1u8pmTYzGlc-pMi6FhPU1AT1sANJHjFohvSQcK2wB6XRPFr29xJclh2tXEzznWaXA
	</pre>'''
}
